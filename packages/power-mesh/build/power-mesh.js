!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("three"),require("ore-three")):"function"==typeof define&&define.amd?define(["three","ore-three"],n):"object"==typeof exports?exports.PowerMesh=n(require("three"),require("ore-three")):t.PowerMesh=n(t.THREE,t.ORE)}(self,((t,n)=>(()=>{"use strict";var e={699:t=>{t.exports=n},381:n=>{n.exports=t}},i={};function o(t){var n=i[t];if(void 0!==n)return n.exports;var a=i[t]={exports:{}};return e[t](a,a.exports,o),a.exports}o.d=(t,n)=>{for(var e in n)o.o(n,e)&&!o.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},o.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var a={};return(()=>{o.r(a),o.d(a,{PowerMesh:()=>r,PowerReflectionMesh:()=>s});var t=o(381),n=o(699);const e="#define GLSLIFY 1\nattribute vec4 tangent;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying vec3 vViewNormal;\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\nvarying vec3 vViewPos;\nvarying vec3 vWorldPos;\nvarying vec2 vHighPrecisionZW;\n\n/*-------------------------------\n\tShadowMap\n-------------------------------*/\n\n#include <shadowmap_pars_vertex>\n\nvoid main( void ) {\n\n\t/*-------------------------------\n\t\tPosition\n\t-------------------------------*/\n\n\tvec3 pos = position;\n\tvec4 worldPos = modelMatrix * vec4( pos, 1.0 );\n\tvec4 mvPosition = viewMatrix * worldPos;\n\t\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t/*-------------------------------\n\t\tNormal / Tangent\n\t-------------------------------*/\n\n\tvec3 transformedNormal = normalMatrix * normal;\n\tvec4 flipedTangent = tangent;\n\tflipedTangent.w *= -1.0;\n\n\t#ifdef FLIP_SIDED\n\t\ttransformedNormal *= -1.0;\n\t\tflipedTangent *= -1.0;\n\t#endif\n\t\n\tvec3 normal = normalize( transformedNormal );\n\tvec3 tangent = normalize( ( modelViewMatrix * vec4( flipedTangent.xyz, 0.0 ) ).xyz );\n\tvec3 biTangent = normalize( cross( normal, tangent ) * flipedTangent.w );\n\n\t/*-------------------------------\n\t\tShadow\n\t-------------------------------*/\n\t\n\tvec4 shadowWorldPos;\n\t\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\t\n\t\t\tshadowWorldPos = worldPos + vec4( vec4( transformedNormal, 0.0 ) * modelMatrix ) * directionalLightShadows[ i ].shadowNormalBias;\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPos;\n\t\t\t\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t\n\t#endif\n\n\t/*-------------------------------\n\t\tVarying\n\t-------------------------------*/\n\t\n\tvUv = uv;\n\tvNormal = normal;\n\tvTangent = tangent;\n\tvBitangent = biTangent;\n\tvViewPos = -mvPosition.xyz;\n\tvWorldPos = worldPos.xyz;\n\tvHighPrecisionZW = gl_Position.zw;\n\t\n}",i="#define GLSLIFY 1\nvarying vec2 vUv;\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n\n/*-------------------------------\n\tRequire\n-------------------------------*/\n\n#include <packing>\n\nvec2 packing16( float value ) { \n\n\tfloat v1 = value * 255.0;\n\tfloat r = floor(v1);\n\n\tfloat v2 = ( v1 - r ) * 255.0;\n\tfloat g = floor( v2 );\n\n\treturn vec2( r, g ) / 255.0;\n\n}\n\n/*-------------------------------\n\tRequiers\n-------------------------------*/\n\n#include <common>\n\nfloat random(vec2 p){\n\treturn fract(sin(dot(p.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n/*-------------------------------\n\tMaterial Uniforms\n-------------------------------*/\n\nuniform float time;\n\n/*-------------------------------\n\tTextures\n-------------------------------*/\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#else\n\n\tuniform vec3 color;\n\n#endif\n\n#ifdef USE_NORMAL_MAP\n\n\tuniform sampler2D normalMap;\n\n#endif\n\n#ifdef USE_ROUGHNESS_MAP\n\n\tuniform sampler2D roughnessMap;\n\n#else\n\n\tuniform float roughness;\n\n#endif\n\n#ifdef USE_ALPHA_MAP\n\n\tuniform sampler2D alphaMap;\n\n#else\n\n\tuniform float opacity;\n\t\n#endif\n\n#ifdef USE_METALNESS_MAP\n\n\tuniform sampler2D metalnessMap;\n\n#else\n\n\tuniform float metalness;\n\n#endif\n#ifdef USE_EMISSION_MAP\n\n\tuniform sampler2D emissionMap;\n\n#else\n\n\tuniform vec3 emission;\n\n#endif\n\n#ifdef IS_REFLECTIONPLANE\n\n\tuniform sampler2D reflectionTex;\n\tuniform vec2 renderResolution;\n\tuniform vec2 mipMapResolution;\n\t\n#endif\n\n/*-------------------------------\n\tTypes\n-------------------------------*/\n\nstruct Geometry {\n\tvec3 pos;\n\tvec3 posWorld;\n\tvec3 viewDir;\n\tvec3 viewDirWorld;\n\tvec3 normal;\n\tvec3 normalWorld;\n};\n\nstruct Light {\n\tvec3 direction;\n\tvec3 color;\n};\n\nstruct Material {\n\tvec3 albedo;\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat metalness;\n\tfloat roughness;\n\tfloat opacity;\n};\n\n/*-------------------------------\n\tLights\n-------------------------------*/\n\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n#endif\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n#endif\n\n/*-------------------------------\n\tEnvMap\n-------------------------------*/\n\n#ifdef USE_ENV_MAP\n\n\tuniform sampler2D envMap;\n\tuniform float envMapIntensity;\n\tuniform float iblIntensity;\n\tuniform float maxLodLevel;\n\n\t#define ENVMAP_TYPE_CUBE_UV\n\t#include <cube_uv_reflection_fragment>\n\n#endif\n\n/*-------------------------------\n\tReflection\n-------------------------------*/\n\n#define REF_MIPMAP_LEVEL 8.0\n\n#ifdef IS_REFLECTIONPLANE\n\n\tvec2 getRefMipmapUV( vec2 uv, float level ) {\n\n\t\tvec2 ruv = uv;\n\n\t\tif( level > 0.0 ) {\n\n\t\t\truv.x *= 1.0 / ( 3.0 * ( pow( 2.0, level ) / 2.0 ) );\n\t\t\truv.y *= 1.0 / ( pow( 2.0, level ) );\n\t\t\truv.y += 1.0 / ( pow( 2.0, level ) );\n\t\t\truv.x += 1.0 / 1.5;\n\t\t\n\t\t} else {\n\n\t\t\truv.x /= 1.5;\n\t\t\t\n\t\t}\n\n\t\treturn ruv;\n\n\t}\n\t\n\tvec4 cubic(float v) {\n\t\tvec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;\n\t\tvec4 s = n * n * n;\n\t\tfloat x = s.x;\n\t\tfloat y = s.y - 4.0 * s.x;\n\t\tfloat z = s.z - 4.0 * s.y + 6.0 * s.x;\n\t\tfloat w = 6.0 - x - y - z;\n\t\treturn vec4(x, y, z, w);\n\t}\n\n\t// https://stackoverflow.com/questions/13501081/efficient-bicubic-filtering-code-in-glsl\n\tvec4 textureBicubic(sampler2D t, vec2 texCoords, vec2 textureSize) {\n\t\tvec2 invTexSize = 1.0 / textureSize;\n\t\ttexCoords = texCoords * textureSize - 0.5;\n\t\tvec2 fxy = fract(texCoords);\n\t\ttexCoords -= fxy;\n\t\tvec4 xcubic = cubic(fxy.x);\n\t\tvec4 ycubic = cubic(fxy.y);\n\t\tvec4 c = texCoords.xxyy + vec2 (-0.5, 1.5).xyxy;\n\t\tvec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);\n\t\tvec4 offset = c + vec4 (xcubic.yw, ycubic.yw) / s;\n\t\toffset *= invTexSize.xxyy;\n\t\tvec4 sample0 = texture2D(t, offset.xz);\n\t\tvec4 sample1 = texture2D(t, offset.yz);\n\t\tvec4 sample2 = texture2D(t, offset.xw);\n\t\tvec4 sample3 = texture2D(t, offset.yw);\n\t\tfloat sx = s.x / (s.x + s.y);\n\t\tfloat sy = s.z / (s.z + s.w);\n\t\treturn mix(\n\t\tmix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);\n\t}\n\n#endif\n\n/*-------------------------------\n\tShadow\n-------------------------------*/\n\n#ifdef DEPTH\n\n\tvarying vec2 vHighPrecisionZW;\n\tuniform float cameraNear;\n\tuniform float cameraFar;\n\n#endif\n\n#ifdef USE_SHADOWMAP\n\n#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#define SHADOW_SAMPLE_COUNT 4\n\n\tvec2 poissonDisk[ SHADOW_SAMPLE_COUNT ];\n\n\tvoid initPoissonDisk( float seed ) {\n\n\t\tfloat r = 0.1;\n\t\tfloat rStep = (1.0 - r) / float( SHADOW_SAMPLE_COUNT );\n\n\t\tfloat ang = random( gl_FragCoord.xy * 0.01 + sin( time ) ) * PI2 * 1.0;\n\t\tfloat angStep = ( ( PI2 * 11.0 ) / float( SHADOW_SAMPLE_COUNT ) );\n\t\t\n\t\tfor( int i = 0; i < SHADOW_SAMPLE_COUNT; i++ ) {\n\n\t\t\tpoissonDisk[ i ] = vec2(\n\t\t\t\tsin( ang ),\n\t\t\t\tcos( ang )\n\t\t\t) * pow( r, 0.75 );\n\n\t\t\tr += rStep;\n\t\t\tang += angStep;\n\t\t}\n\t\t\n\t}\n\n\tvec2 compairShadowMapDepth( sampler2D shadowMap, vec2 shadowMapUV, float depth ) {\n\n\t\tif( shadowMapUV.x < 0.0 || shadowMapUV.x > 1.0 || shadowMapUV.y < 0.0 || shadowMapUV.y > 1.0 ) {\n\n\t\t\treturn vec2( 1.0, 0.0 );\n\n\t\t}\n\n\t\tfloat shadowMapDepth = unpackRGBAToDepth( texture2D( shadowMap, shadowMapUV ) );\n\n\t\tif( 0.0 >= shadowMapDepth || shadowMapDepth >= 1.0 ) {\n\n\t\t\treturn vec2( 1.0, 0.0 );\n\n\t\t}\n\t\t\n\t\tfloat shadow = depth <= shadowMapDepth ? 1.0 : 0.0;\n\n\t\treturn vec2( shadow, shadowMapDepth );\n\t\t\n\t}\n\n\tfloat shadowMapPCF( sampler2D shadowMap, vec4 shadowMapCoord, vec2 shadowSize ) {\n\n\t\tfloat shadow = 0.0;\n\t\t\n\t\tfor( int i = 0; i < SHADOW_SAMPLE_COUNT; i ++  ) {\n\t\t\t\n\t\t\tvec2 offset = poissonDisk[ i ] * shadowSize; \n\n\t\t\tshadow += compairShadowMapDepth( shadowMap, shadowMapCoord.xy + offset, shadowMapCoord.z ).x;\n\t\t\t\n\t\t}\n\n\t\tshadow /= float( SHADOW_SAMPLE_COUNT );\n\n\t\treturn shadow;\n\n\t}\n\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float bias, vec4 shadowMapCoord ) {\n\t\t\n\t\tshadowMapCoord.xyz /= shadowMapCoord.w;\n\t\tshadowMapCoord.z += bias - 0.0001;\n\n\t\tinitPoissonDisk(time);\n\n\t\tvec2 shadowSize = 1.0 / shadowMapSize;\n\n\t\treturn shadowMapPCF( shadowMap, shadowMapCoord, shadowSize );\n\n\t}\n\n#endif\n\n/*-------------------------------\n\tRE\n-------------------------------*/\n\nvarying vec3 vNormal;\nvarying vec3 vViewNormal;\nvarying vec3 vViewPos;\nvarying vec3 vWorldPos;\n\nfloat ggx( float dNH, float roughness ) {\n\t\n\tfloat a2 = roughness * roughness;\n\ta2 = a2 * a2;\n\tfloat dNH2 = dNH * dNH;\n\n\tif( dNH2 <= 0.0 ) return 0.0;\n\n\treturn a2 / ( PI * pow( dNH2 * ( a2 - 1.0 ) + 1.0, 2.0) );\n\n}\n\nvec3 lambert( vec3 diffuseColor ) {\n\n\treturn diffuseColor / PI;\n\n}\n\nfloat gSchlick( float d, float k ) {\n\n\tif( d == 0.0 ) return 0.0;\n\n\treturn d / ( d * ( 1.0 - k ) + k );\n\t\n}\n\nfloat gSmith( float dNV, float dNL, float roughness ) {\n\n\tfloat k = clamp( roughness * sqrt( 2.0 / PI ), 0.0, 1.0 );\n\n\treturn gSchlick( dNV, k ) * gSchlick( dNL, k );\n\t\n}\n\nfloat fresnel( float d ) {\n\t\n\tfloat f0 = 0.04;\n\n\treturn f0 + ( 1.0 - f0 ) * pow( 1.0 - d, 5.0 );\n\n}\n\nvec3 RE( Geometry geo, Material mat, Light light) {\n\n\tvec3 lightDir = normalize( light.direction );\n\tvec3 halfVec = normalize( geo.viewDir + lightDir );\n\n\tfloat dLH = clamp( dot( lightDir, halfVec ), 0.0, 1.0 );\n\tfloat dNH = clamp( dot( geo.normal, halfVec ), 0.0, 1.0 );\n\tfloat dNV = clamp( dot( geo.normal, geo.viewDir ), 0.0, 1.0 );\n\tfloat dNL = clamp( dot( geo.normal, lightDir), 0.0, 1.0 );\n\n\tvec3 irradiance = light.color * dNL;\n\n\t// diffuse\n\tvec3 diffuse = lambert( mat.diffuseColor ) * irradiance;\n\n\t// specular\n\tfloat D = ggx( dNH, mat.roughness );\n\tfloat G = gSmith( dNV, dNL, mat.roughness );\n\tfloat F = fresnel( dLH );\n\t\n\tvec3 specular = (( D * G * F ) / ( 4.0 * dNL * dNV + 0.0001 ) * mat.specularColor ) * irradiance; \n\n\tvec3 c = vec3( 0.0 );\n\tc += diffuse * ( 1.0 - F ) + specular;\n\n\treturn c;\n\n}\n\n/*-------------------------------\n\tMain\n-------------------------------*/\n\nvoid main( void ) {\n\n\t/*-------------------------------\n\t\tMaterial\n\t-------------------------------*/\n\n\tMaterial mat;\n\n\t#ifdef USE_MAP\n\n\t\tvec4 color = LinearTosRGB( texture2D( map, vUv ) );\n\t\tmat.albedo = color.xyz;\n\t\tmat.opacity = color.w;\n\n\t#else\n\n\t\tmat.albedo = color.xyz;\n\t\tmat.opacity = 1.0;\n\t\n\t#endif\n\n\t#ifdef USE_ROUGHNESS_MAP\n\n\t\tmat.roughness = texture2D( roughnessMap, vUv ).y;\n\n\t#else\n\n\t\tmat.roughness = roughness;\n\t\n\t#endif\n\n\t#ifdef USE_METALNESS_MAP\n\n\t\tmat.metalness = texture2D( metalnessMap, vUv ).z;\n\n\t#else\n\n\t\tmat.metalness = metalness;\n\t\n\t#endif\n\n\t#ifdef USE_ALPHA_MAP\n\n\t\tmat.opacity = texture2D( alphaMap, vUv ).x;\n\n\t#else\n\n\t\tmat.opacity *= opacity;\n\n\t#endif\n\t\n\t// if( mat.opacity < 0.5 ) discard;\n\n\tmat.diffuseColor = mix( mat.albedo, vec3( 0.0, 0.0, 0.0 ), mat.metalness );\n\tmat.specularColor = mix( vec3( 1.0, 1.0, 1.0 ), mat.albedo, mat.metalness );\n\n\t// output\n\tvec3 outColor = vec3( 0.0 );\n\tfloat outOpacity = mat.opacity;\n\n\t/*-------------------------------\n\t\tDepth\n\t-------------------------------*/\n\n\t#ifdef DEPTH\n\n\t\tfloat fragCoordZ = 0.5 * vHighPrecisionZW.x / vHighPrecisionZW.y + 0.5;\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t\treturn;\n\t\n\t#endif\n\n\t/*-------------------------------\n\t\tGeometry\n\t-------------------------------*/\n\n\tfloat faceDirection = gl_FrontFacing ? 1.0 : -1.0;\n\n\tGeometry geo;\n\tgeo.pos = -vViewPos;\n\tgeo.posWorld = vWorldPos;\n\tgeo.viewDir = normalize( vViewPos );\n\tgeo.viewDirWorld = normalize( geo.posWorld - cameraPosition );\n\tgeo.normal = normalize( vNormal ) * faceDirection;\n\n\t#ifdef USE_NORMAL_MAP\n\t\t\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\ttangent *= faceDirection;\n\t\t\tbitangent *= faceDirection;\n\t\t\n\t\t#endif\n\t\t\n\t\tmat3 vTBN = mat3( tangent, bitangent, geo.normal );\n\t\t\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz;\n\t\tmapN = mapN * 2.0 - 1.0;\n\t\tgeo.normal = normalize( vTBN * mapN );\n\n\t#endif\n\t\n\tgeo.normalWorld = normalize( ( vec4( geo.normal, 0.0 ) * viewMatrix ).xyz );\n\n\t/*-------------------------------\n\t\tLighting\n\t-------------------------------*/\n\t\n\tLight light;\n\n\t#if NUM_DIR_LIGHTS > 0\n\n\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\t\t\tlight.direction = directionalLights[ i ].direction;\n\t\t\t\tlight.color = directionalLights[ i ].color;\n\n\t\t\t\tfloat shadow = 1.0;\n\t\t\t\t\n\t\t\t\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\t\t\t\tshadow = getShadow( directionalShadowMap[ i ], directionalLightShadows[ i ].shadowMapSize, directionalLightShadows[ i ].shadowBias, vDirectionalShadowCoord[ i ] );\n\n\t\t\t\t#endif\n\n\t\t\t\toutColor += RE( geo, mat, light ) * shadow;\n\t\t\t\t\n\t\t\t}\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHTS > 0\n\n\t\tPointLight pLight;\n\t\tvec3 v;\n\t\tfloat d;\n\t\tfloat attenuation;\n\t\t#pragma unroll_loop_start\n\n\t\t\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\t\t\tpLight = pointLights[ i ];\n\n\t\t\t\tv = pLight.position - geo.pos;\n\t\t\t\td = length( v );\n\t\t\t\tlight.direction = normalize( v );\n\t\t\n\t\t\t\tlight.color = pLight.color;\n\n\t\t\t\tif( pLight.distance > 0.0 && pLight.decay > 0.0 ) {\n\n\t\t\t\t\tattenuation = pow( clamp( -d / pLight.distance + 1.0, 0.0, 1.0 ), pLight.decay );\n\t\t\t\t\tlight.color *= attenuation;\n\n\t\t\t\t}\n\n\t\t\t\toutColor += RE( geo, mat, light );\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if defined( USE_ENV_MAP ) || defined( IS_REFLECTIONPLANE )\n\n\t\tfloat dNV = clamp( dot( geo.normal, geo.viewDir ), 0.0, 1.0 );\n\t\tfloat EF = fresnel( dNV );\n\n\t#endif\n\n\t/*-------------------------------\n\t\tEnvironment Lighting\n\t-------------------------------*/\n\n\t#ifdef USE_ENV_MAP\n\n\t\tvec3 refDir = reflect( geo.viewDirWorld, geo.normalWorld );\n\t\trefDir.x *= -1.0;\n\t\n\t\tvec4 envMapColor = textureCubeUV( envMap, geo.normalWorld, 1.0 ) * iblIntensity * envMapIntensity;\n\t\toutColor += mat.diffuseColor * envMapColor.xyz * ( 1.0 - mat.metalness );\n\n\t#endif\n\n\t/*-------------------------------\n\t\tReflection\n\t-------------------------------*/\n\t\n\t#ifdef IS_REFLECTIONPLANE\n\t\n\t\tvec2 refUV = gl_FragCoord.xy / renderResolution;\n\n\t\trefUV.x += geo.normal.x * 0.5;\n\n\t\tfloat l = (mat.roughness ) * 1.6 * REF_MIPMAP_LEVEL;\n\n\t\tfloat offset1 = floor( l );\n\t\tfloat offset2 = offset1 + 1.0;\n\t\tfloat blend = fract( l );\n\t\t\n\t\tvec2 ruv1 = getRefMipmapUV( refUV, offset1 );\n\t\tvec2 ruv2 = getRefMipmapUV( refUV, offset2 );\n\n\t\tvec3 ref1 = textureBicubic( reflectionTex, ruv1, mipMapResolution ).xyz;\n\t\tvec3 ref2 = textureBicubic( reflectionTex, ruv2, mipMapResolution ).xyz;\n\n\t\tvec3 ref = mat.specularColor * mix( ref1, ref2, blend );\n\n\t\toutColor = mix(\n\t\t\toutColor + ref * mat.metalness,\n\t\t\tref,\n\t\t\tEF\n\t\t);\n\n\t#elif defined( USE_ENV_MAP )\n\t\n\t\tvec3 env = mat.specularColor * textureCubeUV( envMap, refDir, mat.roughness ).xyz * envMapIntensity;\n\t\n\t\toutColor = mix(\n\t\t\toutColor + env * mat.metalness,\n\t\t\tenv,\n\t\t\tEF\n\t\t);\n\t\n\t#endif\n\n\t/*-------------------------------\n\t\tEmission\n\t-------------------------------*/\n\n\t#ifdef USE_EMISSION_MAP\n\n\t\toutColor += LinearTosRGB( texture2D( emissionMap, vUv ) ).xyz;\n\t\n\t#else\n\n\t\toutColor += emission;\n\n\t#endif\n\n\tgl_FragColor = vec4( outColor, outOpacity );\n\n}";class r extends t.Mesh{constructor(o,a,r){a=a||{};let s,l=n.UniformsLib.mergeUniforms(a.uniforms||{},{envMap:{value:null},envMapIntensity:{value:null},iblIntensity:{value:null},maxLodLevel:{value:0},shadowLightModelViewMatrix:{value:new t.Matrix4},shadowLightProjectionMatrix:{value:new t.Matrix4},shadowLightDirection:{value:new t.Vector3},shadowLightCameraClip:{value:new t.Vector2},shadowMap:{value:null},shadowMapSize:{value:new t.Vector2},shadowMapResolution:{value:new t.Vector2},shadowLightSize:{value:1},cameraNear:{value:.01},cameraFar:{value:1e3},color:{value:new t.Color(1,1,1)},metalness:{value:0},roughness:{value:.5},opacity:{value:1},emission:{value:new t.Color(0,0,0)}});if(l=n.UniformsLib.mergeUniforms(l,t.UniformsUtils.clone(t.UniformsLib.lights)),"isBufferGeometry"in o)s=o;else if("isMesh"in o){s=o.geometry;let t=o.material;t.isMeshStandardMaterial&&(t.map?l.map={value:t.map}:t.color&&l.color.value.copy(t.color),t.roughnessMap?l.roughnessMap={value:t.roughnessMap}:l.roughness.value=t.roughness,t.alphaMap?l.alphaMap={value:t.alphaMap}:l.opacity.value=t.opacity,t.metalnessMap?l.metalnessMap={value:t.metalnessMap}:l.metalness.value=t.metalness,t.normalMap&&(l.normalMap={value:t.normalMap}),t.emissiveMap?l.emissionMap={value:t.emissiveMap}:l.emission.value.copy(t.emissive))}else s=new t.BufferGeometry;s.getAttribute("tangent")||s.getIndex()&&s.getAttribute("position")&&s.getAttribute("normal")&&s.getAttribute("uv")&&s.computeTangents(),a.uniforms=l;let c=new t.ShaderMaterial(Object.assign({vertexShader:e,fragmentShader:i,lights:!0,transparent:!0,side:t.DoubleSide,extensions:{derivatives:!0},defines:{}},a));if(l.map&&(c.defines.USE_MAP=""),l.roughnessMap&&(c.defines.USE_ROUGHNESS_MAP=""),l.metalnessMap&&(c.defines.USE_METALNESS_MAP=""),l.alphaMap&&(c.defines.USE_ALPHA_MAP=""),l.normalMap&&(c.defines.USE_NORMAL_MAP=""),l.emissionMap&&(c.defines.USE_EMISSION_MAP=""),super(s,c),this.name=o.name,this.userData.colorMat=this.material,this.customDepthMaterial=new t.ShaderMaterial(Object.assign(Object.assign({vertexShader:e,fragmentShader:i,side:t.DoubleSide,lights:!0,extensions:{derivatives:!0}},a),{defines:Object.assign(Object.assign({},c.defines),{DEPTH:""})})),this.commonUniforms=l,"isMesh"in o&&r){o.geometry.dispose(),o.children.slice().forEach((t=>{this.add(t)})),this.position.copy(o.position),this.rotation.copy(o.rotation),this.scale.copy(o.scale);let t=o.parent;t&&(t.add(this),t.remove(o))}this.envMapSrc=null,this.envMapUpdate=!1,this.envMapResolution=256,this.envMapRenderTarget=new t.WebGLCubeRenderTarget(this.envMapResolution,{format:t.RGBAFormat,generateMipmaps:!0,magFilter:t.LinearFilter,minFilter:t.LinearFilter}),this.envMapCamera=new t.CubeCamera(.001,1e3,this.envMapRenderTarget),this.getWorldPosition(this.envMapCamera.position),this.onBeforeRender=(t,n,e)=>{this.dispatchEvent({type:"beforeRender",renderer:t,scene:n,camera:e})},this.addEventListener("beforeRender",(n=>{let e=n.renderer,i=n.scene,o=n.camera;if(this.envMapUpdate){let n=null,o=new t.PMREMGenerator(e);o.compileEquirectangularShader(),this.envMapSrc?n="isCubeTexture"in this.envMapSrc?o.fromCubemap(this.envMapSrc):o.fromEquirectangular(this.envMapSrc):(this.visible=!1,this.envMapCamera.update(e,i),n=o.fromCubemap(this.envMapRenderTarget.texture),this.visible=!0);let a=n.height;const r=Math.round(Math.log2(a))-2,s=1/a,l=1/(3*Math.max(Math.pow(2,r),112));c.defines.USE_ENV_MAP="",c.defines.CUBEUV_MAX_MIP=r+".0",c.defines.CUBEUV_TEXEL_WIDTH=l+"",c.defines.CUBEUV_TEXEL_HEIGHT=s+"",this.commonUniforms.envMap.value=n.texture,this.envMapUpdate=!1}o.userData.depthCamera&&(this.material=this.userData.depthMat,this.commonUniforms.cameraNear.value=o.near,this.commonUniforms.cameraFar.value=o.far,this.material||(this.visible=!1))}));const d=()=>{this.envMapRenderTarget.dispose(),this.geometry.dispose(),this.material.dispose(),this.removeEventListener("dispose",d)};this.addEventListener("dispose",d)}updateEnvMap(t=null){this.envMapSrc=t,this.envMapUpdate=!0,null==this.commonUniforms.envMapIntensity.value&&(this.commonUniforms.envMapIntensity.value=1),null==this.commonUniforms.iblIntensity.value&&(this.commonUniforms.iblIntensity.value=1)}set envMapIntensity(t){this.commonUniforms.envMapIntensity.value=t}set iblIntensity(t){this.commonUniforms.iblIntensity.value=t}dispose(){this.dispatchEvent({type:"dispsoe"})}get isPowerMesh(){return!0}}class s extends r{constructor(e,i,o){(i=i||{}).uniforms=n.UniformsLib.mergeUniforms(i.uniforms||{},{reflectionTex:{value:null},renderResolution:{value:new t.Vector2(1,1)},textureMatrix:{value:new t.Matrix4},mipMapResolution:{value:new t.Vector2(1,1)}}),i.defines={IS_REFLECTIONPLANE:""},super(e,i,o),this.reflectorPlane=new t.Plane,this.normal=new t.Vector3,this.reflectorWorldPosition=new t.Vector3,this.cameraWorldPosition=new t.Vector3,this.rotationMatrix=new t.Matrix4,this.lookAtPosition=new t.Vector3(0,0,-1),this.clipPlane=new t.Vector4,this.textureMatrix=this.commonUniforms.textureMatrix.value,this.clipBias=.1,this.view=new t.Vector3,this.target=new t.Vector3,this.q=new t.Vector4,this.virtualCamera=new t.PerspectiveCamera,this.mipmapPP=null,this.mipmapGeo=new t.BufferGeometry;let a=[],r=[],s=[],l=new t.Vector2(0,0),c=2;a.push(l.x,l.y,0),a.push(l.x+c,l.y,0),a.push(l.x+c,l.y-c,0),a.push(l.x,l.y-c,0),r.push(1,1),r.push(0,1),r.push(0,0),r.push(1,0),s.push(0,2,1,0,3,2),l.set(c,0);for(let t=0;t<7;t++){c*=.5,a.push(l.x,l.y,0),a.push(l.x+c,l.y,0),a.push(l.x+c,l.y-c,0),a.push(l.x,l.y-c,0),r.push(1,1),r.push(0,1),r.push(0,0),r.push(1,0);let n=4*(t+0);s.push(n+0,n+2,n+1,n+0,n+3,n+2),l.y=l.y-c}let d=new t.BufferAttribute(new Float32Array(a),3),m=new t.BufferAttribute(new Float32Array(r),2),f=new t.BufferAttribute(new Uint16Array(s),1);d.applyMatrix4((new t.Matrix4).makeScale(1/1.5,1,1)),d.applyMatrix4((new t.Matrix4).makeTranslation(-1,1,0)),this.mipmapGeo.setAttribute("position",d),this.mipmapGeo.setAttribute("uv",m),this.mipmapGeo.setIndex(f),this.renderTargets={ref:new t.WebGLRenderTarget(1,1),mipmap:new t.WebGLRenderTarget(1,1)},this.addEventListener("beforeRender",(e=>{let i=e.renderer,o=e.scene,a=e.camera;if(this.reflectorWorldPosition.setFromMatrixPosition(this.matrixWorld),this.cameraWorldPosition.setFromMatrixPosition(a.matrixWorld),this.rotationMatrix.extractRotation(this.matrixWorld),this.normal.set(0,1,0),this.normal.applyMatrix4(this.rotationMatrix),this.view.subVectors(this.reflectorWorldPosition,this.cameraWorldPosition),this.view.dot(this.normal)>0)return;this.view.reflect(this.normal).negate(),this.view.add(this.reflectorWorldPosition),this.rotationMatrix.extractRotation(a.matrixWorld),this.lookAtPosition.set(0,0,-1),this.lookAtPosition.applyMatrix4(this.rotationMatrix),this.lookAtPosition.add(this.cameraWorldPosition),this.target.subVectors(this.reflectorWorldPosition,this.lookAtPosition),this.target.reflect(this.normal).negate(),this.target.add(this.reflectorWorldPosition),this.virtualCamera.position.copy(this.view),this.virtualCamera.up.set(0,1,0),this.virtualCamera.up.applyMatrix4(this.rotationMatrix),this.virtualCamera.up.reflect(this.normal),this.virtualCamera.lookAt(this.target),a.far&&(this.virtualCamera.far=a.far),this.virtualCamera.updateMatrixWorld(),this.virtualCamera.projectionMatrix.copy(a.projectionMatrix),this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.virtualCamera.projectionMatrix),this.textureMatrix.multiply(this.virtualCamera.matrixWorldInverse),this.textureMatrix.multiply(this.matrixWorld),this.reflectorPlane.setFromNormalAndCoplanarPoint(this.normal,this.reflectorWorldPosition),this.reflectorPlane.applyMatrix4(this.virtualCamera.matrixWorldInverse),this.clipPlane.set(this.reflectorPlane.normal.x,this.reflectorPlane.normal.y,this.reflectorPlane.normal.z,this.reflectorPlane.constant);var r=this.virtualCamera.projectionMatrix;this.q.x=(Math.sign(this.clipPlane.x)+r.elements[8])/r.elements[0],this.q.y=(Math.sign(this.clipPlane.y)+r.elements[9])/r.elements[5],this.q.z=-1,this.q.w=(1+r.elements[10])/r.elements[14],this.clipPlane.multiplyScalar(2/this.clipPlane.dot(this.q)),r.elements[2]=this.clipPlane.x,r.elements[6]=this.clipPlane.y,r.elements[10]=this.clipPlane.z+1-this.clipBias,r.elements[14]=this.clipPlane.w;let s=i.getRenderTarget();i.setRenderTarget(this.renderTargets.ref),this.visible=!1,i.clear(),i.render(o,this.virtualCamera),i.clearDepth(),i.setRenderTarget(s),this.visible=!0,null==this.mipmapPP&&(this.mipmapPP=new n.PostProcessing(i,{fragmentShader:"#define GLSLIFY 1\nuniform sampler2D tex;\nvarying vec2 vUv;\n\nfloat clip( vec2 uv ) {\n\tvec2 c = step( abs(uv - 0.5), vec2( 0.5 ) );\n\treturn c.x * c.y;\n}\n\nvoid main( void ) {\n\n\tvec4 col = texture2D( tex, vUv );\n\tgl_FragColor = col;\n\n}",side:t.DoubleSide},this.mipmapGeo)),this.mipmapPP.render({tex:this.renderTargets.ref.texture},this.renderTargets.mipmap),this.commonUniforms.reflectionTex.value=this.renderTargets.mipmap.texture;let l=i.getRenderTarget();l?this.commonUniforms.renderResolution.value.set(l.width,l.height):(i.getSize(this.commonUniforms.renderResolution.value),this.commonUniforms.renderResolution.value.multiplyScalar(i.getPixelRatio()))})),this.resize()}resize(){this.renderTargets.ref.setSize(512,512);let n=new t.Vector2(768,512);this.renderTargets.mipmap.setSize(n.x,n.y),this.commonUniforms.mipMapResolution.value.copy(n)}}})(),a})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,